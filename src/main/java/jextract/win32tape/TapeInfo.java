// Generated by jextract

package jextract.win32tape;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     _Bool driveECC;
 *     _Bool driveCompression;
 *     _Bool driveDataPadding;
 *     _Bool driveReportSetmarks;
 *     unsigned long driveDefaultBlockSize;
 *     unsigned long driveMaximumBlockSize;
 *     unsigned long driveMinimumBlockSize;
 *     unsigned long driveMaximumPartitionCount;
 *     unsigned long driveFeaturesLow;
 *     unsigned long driveFeaturesHigh;
 *     unsigned long driveEOTWarningZoneSize;
 *     long long mediaCapacity;
 *     long long mediaRemaining;
 *     unsigned long mediaBlockSize;
 *     unsigned long mediaPartitionCount;
 *     _Bool mediaWriteProtected;
 * };
 * }
 */
public class TapeInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static VarHandle driveECC$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool driveECC;
     * }
     */
    public static boolean driveECC$get(MemorySegment seg) {
        return (boolean)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool driveECC;
     * }
     */
    public static void driveECC$set(MemorySegment seg, boolean x) {
        constants$0.const$1.set(seg, x);
    }
    public static boolean driveECC$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void driveECC$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveCompression$VH() {
        return constants$0.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool driveCompression;
     * }
     */
    public static boolean driveCompression$get(MemorySegment seg) {
        return (boolean)constants$0.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool driveCompression;
     * }
     */
    public static void driveCompression$set(MemorySegment seg, boolean x) {
        constants$0.const$2.set(seg, x);
    }
    public static boolean driveCompression$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void driveCompression$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveDataPadding$VH() {
        return constants$0.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool driveDataPadding;
     * }
     */
    public static boolean driveDataPadding$get(MemorySegment seg) {
        return (boolean)constants$0.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool driveDataPadding;
     * }
     */
    public static void driveDataPadding$set(MemorySegment seg, boolean x) {
        constants$0.const$3.set(seg, x);
    }
    public static boolean driveDataPadding$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void driveDataPadding$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveReportSetmarks$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool driveReportSetmarks;
     * }
     */
    public static boolean driveReportSetmarks$get(MemorySegment seg) {
        return (boolean)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool driveReportSetmarks;
     * }
     */
    public static void driveReportSetmarks$set(MemorySegment seg, boolean x) {
        constants$0.const$4.set(seg, x);
    }
    public static boolean driveReportSetmarks$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void driveReportSetmarks$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveDefaultBlockSize$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveDefaultBlockSize;
     * }
     */
    public static int driveDefaultBlockSize$get(MemorySegment seg) {
        return (int)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveDefaultBlockSize;
     * }
     */
    public static void driveDefaultBlockSize$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }
    public static int driveDefaultBlockSize$get(MemorySegment seg, long index) {
        return (int)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void driveDefaultBlockSize$set(MemorySegment seg, long index, int x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveMaximumBlockSize$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveMaximumBlockSize;
     * }
     */
    public static int driveMaximumBlockSize$get(MemorySegment seg) {
        return (int)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveMaximumBlockSize;
     * }
     */
    public static void driveMaximumBlockSize$set(MemorySegment seg, int x) {
        constants$1.const$0.set(seg, x);
    }
    public static int driveMaximumBlockSize$get(MemorySegment seg, long index) {
        return (int)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void driveMaximumBlockSize$set(MemorySegment seg, long index, int x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveMinimumBlockSize$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveMinimumBlockSize;
     * }
     */
    public static int driveMinimumBlockSize$get(MemorySegment seg) {
        return (int)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveMinimumBlockSize;
     * }
     */
    public static void driveMinimumBlockSize$set(MemorySegment seg, int x) {
        constants$1.const$1.set(seg, x);
    }
    public static int driveMinimumBlockSize$get(MemorySegment seg, long index) {
        return (int)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void driveMinimumBlockSize$set(MemorySegment seg, long index, int x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveMaximumPartitionCount$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveMaximumPartitionCount;
     * }
     */
    public static int driveMaximumPartitionCount$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveMaximumPartitionCount;
     * }
     */
    public static void driveMaximumPartitionCount$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int driveMaximumPartitionCount$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void driveMaximumPartitionCount$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveFeaturesLow$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveFeaturesLow;
     * }
     */
    public static int driveFeaturesLow$get(MemorySegment seg) {
        return (int)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveFeaturesLow;
     * }
     */
    public static void driveFeaturesLow$set(MemorySegment seg, int x) {
        constants$1.const$3.set(seg, x);
    }
    public static int driveFeaturesLow$get(MemorySegment seg, long index) {
        return (int)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void driveFeaturesLow$set(MemorySegment seg, long index, int x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveFeaturesHigh$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveFeaturesHigh;
     * }
     */
    public static int driveFeaturesHigh$get(MemorySegment seg) {
        return (int)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveFeaturesHigh;
     * }
     */
    public static void driveFeaturesHigh$set(MemorySegment seg, int x) {
        constants$1.const$4.set(seg, x);
    }
    public static int driveFeaturesHigh$get(MemorySegment seg, long index) {
        return (int)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void driveFeaturesHigh$set(MemorySegment seg, long index, int x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driveEOTWarningZoneSize$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long driveEOTWarningZoneSize;
     * }
     */
    public static int driveEOTWarningZoneSize$get(MemorySegment seg) {
        return (int)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long driveEOTWarningZoneSize;
     * }
     */
    public static void driveEOTWarningZoneSize$set(MemorySegment seg, int x) {
        constants$1.const$5.set(seg, x);
    }
    public static int driveEOTWarningZoneSize$get(MemorySegment seg, long index) {
        return (int)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void driveEOTWarningZoneSize$set(MemorySegment seg, long index, int x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mediaCapacity$VH() {
        return constants$2.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long mediaCapacity;
     * }
     */
    public static long mediaCapacity$get(MemorySegment seg) {
        return (long)constants$2.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long mediaCapacity;
     * }
     */
    public static void mediaCapacity$set(MemorySegment seg, long x) {
        constants$2.const$0.set(seg, x);
    }
    public static long mediaCapacity$get(MemorySegment seg, long index) {
        return (long)constants$2.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mediaCapacity$set(MemorySegment seg, long index, long x) {
        constants$2.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mediaRemaining$VH() {
        return constants$2.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long mediaRemaining;
     * }
     */
    public static long mediaRemaining$get(MemorySegment seg) {
        return (long)constants$2.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long mediaRemaining;
     * }
     */
    public static void mediaRemaining$set(MemorySegment seg, long x) {
        constants$2.const$1.set(seg, x);
    }
    public static long mediaRemaining$get(MemorySegment seg, long index) {
        return (long)constants$2.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void mediaRemaining$set(MemorySegment seg, long index, long x) {
        constants$2.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mediaBlockSize$VH() {
        return constants$2.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long mediaBlockSize;
     * }
     */
    public static int mediaBlockSize$get(MemorySegment seg) {
        return (int)constants$2.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long mediaBlockSize;
     * }
     */
    public static void mediaBlockSize$set(MemorySegment seg, int x) {
        constants$2.const$2.set(seg, x);
    }
    public static int mediaBlockSize$get(MemorySegment seg, long index) {
        return (int)constants$2.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mediaBlockSize$set(MemorySegment seg, long index, int x) {
        constants$2.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mediaPartitionCount$VH() {
        return constants$2.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long mediaPartitionCount;
     * }
     */
    public static int mediaPartitionCount$get(MemorySegment seg) {
        return (int)constants$2.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long mediaPartitionCount;
     * }
     */
    public static void mediaPartitionCount$set(MemorySegment seg, int x) {
        constants$2.const$3.set(seg, x);
    }
    public static int mediaPartitionCount$get(MemorySegment seg, long index) {
        return (int)constants$2.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mediaPartitionCount$set(MemorySegment seg, long index, int x) {
        constants$2.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mediaWriteProtected$VH() {
        return constants$2.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool mediaWriteProtected;
     * }
     */
    public static boolean mediaWriteProtected$get(MemorySegment seg) {
        return (boolean)constants$2.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool mediaWriteProtected;
     * }
     */
    public static void mediaWriteProtected$set(MemorySegment seg, boolean x) {
        constants$2.const$4.set(seg, x);
    }
    public static boolean mediaWriteProtected$get(MemorySegment seg, long index) {
        return (boolean)constants$2.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mediaWriteProtected$set(MemorySegment seg, long index, boolean x) {
        constants$2.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


